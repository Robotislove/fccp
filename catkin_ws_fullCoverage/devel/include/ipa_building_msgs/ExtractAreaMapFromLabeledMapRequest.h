// Generated by gencpp from file ipa_building_msgs/ExtractAreaMapFromLabeledMapRequest.msg
// DO NOT EDIT!


#ifndef IPA_BUILDING_MSGS_MESSAGE_EXTRACTAREAMAPFROMLABELEDMAPREQUEST_H
#define IPA_BUILDING_MSGS_MESSAGE_EXTRACTAREAMAPFROMLABELEDMAPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>

namespace ipa_building_msgs
{
template <class ContainerAllocator>
struct ExtractAreaMapFromLabeledMapRequest_
{
  typedef ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> Type;

  ExtractAreaMapFromLabeledMapRequest_()
    : segmented_map()
    , segment_of_interest(0)  {
    }
  ExtractAreaMapFromLabeledMapRequest_(const ContainerAllocator& _alloc)
    : segmented_map(_alloc)
    , segment_of_interest(0)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _segmented_map_type;
  _segmented_map_type segmented_map;

   typedef int32_t _segment_of_interest_type;
  _segment_of_interest_type segment_of_interest;





  typedef boost::shared_ptr< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ExtractAreaMapFromLabeledMapRequest_

typedef ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<std::allocator<void> > ExtractAreaMapFromLabeledMapRequest;

typedef boost::shared_ptr< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest > ExtractAreaMapFromLabeledMapRequestPtr;
typedef boost::shared_ptr< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest const> ExtractAreaMapFromLabeledMapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator1> & lhs, const ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.segmented_map == rhs.segmented_map &&
    lhs.segment_of_interest == rhs.segment_of_interest;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator1> & lhs, const ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ipa_building_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f51e808cfeaacccbb271d4b8435d4774";
  }

  static const char* value(const ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf51e808cfeaacccbULL;
  static const uint64_t static_value2 = 0xb271d4b8435d4774ULL;
};

template<class ContainerAllocator>
struct DataType< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ipa_building_msgs/ExtractAreaMapFromLabeledMapRequest";
  }

  static const char* value(const ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The request message provides a segmented map which consists of cells with label 0 for inaccessible areas and other number from 1 to N\n"
"# for labeling membership with one of the N segmented areas.\n"
"# The return message shall deliver the same map but with only one area (segment_of_interest) labeled as 255 and the remainder labeled\n"
"# as inaccessible with 0.\n"
"\n"
"sensor_msgs/Image segmented_map		# a map segmented into N areas which carry the respective segment number in every pixel cell,\n"
"									# format 32SC1, room labels from 1 to N, 0 represents inaccessible cells (e.g. walls)\n"
"int32 segment_of_interest		# the specific area label of the area of which a map shall be created\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.segmented_map);
      stream.next(m.segment_of_interest);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExtractAreaMapFromLabeledMapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ipa_building_msgs::ExtractAreaMapFromLabeledMapRequest_<ContainerAllocator>& v)
  {
    s << indent << "segmented_map: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.segmented_map);
    s << indent << "segment_of_interest: ";
    Printer<int32_t>::stream(s, indent + "  ", v.segment_of_interest);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IPA_BUILDING_MSGS_MESSAGE_EXTRACTAREAMAPFROMLABELEDMAPREQUEST_H
