// Generated by gencpp from file ipa_building_msgs/CheckCoverageRequest.msg
// DO NOT EDIT!


#ifndef IPA_BUILDING_MSGS_MESSAGE_CHECKCOVERAGEREQUEST_H
#define IPA_BUILDING_MSGS_MESSAGE_CHECKCOVERAGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>

namespace ipa_building_msgs
{
template <class ContainerAllocator>
struct CheckCoverageRequest_
{
  typedef CheckCoverageRequest_<ContainerAllocator> Type;

  CheckCoverageRequest_()
    : input_map()
    , map_resolution(0.0)
    , map_origin()
    , path()
    , field_of_view()
    , field_of_view_origin()
    , coverage_radius(0.0)
    , check_for_footprint(false)
    , check_number_of_coverages(false)  {
    }
  CheckCoverageRequest_(const ContainerAllocator& _alloc)
    : input_map(_alloc)
    , map_resolution(0.0)
    , map_origin(_alloc)
    , path(_alloc)
    , field_of_view(_alloc)
    , field_of_view_origin(_alloc)
    , coverage_radius(0.0)
    , check_for_footprint(false)
    , check_number_of_coverages(false)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _input_map_type;
  _input_map_type input_map;

   typedef float _map_resolution_type;
  _map_resolution_type map_resolution;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _map_origin_type;
  _map_origin_type map_origin;

   typedef std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other >  _path_type;
  _path_type path;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _field_of_view_type;
  _field_of_view_type field_of_view;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _field_of_view_origin_type;
  _field_of_view_origin_type field_of_view_origin;

   typedef float _coverage_radius_type;
  _coverage_radius_type coverage_radius;

   typedef uint8_t _check_for_footprint_type;
  _check_for_footprint_type check_for_footprint;

   typedef uint8_t _check_number_of_coverages_type;
  _check_number_of_coverages_type check_number_of_coverages;





  typedef boost::shared_ptr< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CheckCoverageRequest_

typedef ::ipa_building_msgs::CheckCoverageRequest_<std::allocator<void> > CheckCoverageRequest;

typedef boost::shared_ptr< ::ipa_building_msgs::CheckCoverageRequest > CheckCoverageRequestPtr;
typedef boost::shared_ptr< ::ipa_building_msgs::CheckCoverageRequest const> CheckCoverageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator1> & lhs, const ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.input_map == rhs.input_map &&
    lhs.map_resolution == rhs.map_resolution &&
    lhs.map_origin == rhs.map_origin &&
    lhs.path == rhs.path &&
    lhs.field_of_view == rhs.field_of_view &&
    lhs.field_of_view_origin == rhs.field_of_view_origin &&
    lhs.coverage_radius == rhs.coverage_radius &&
    lhs.check_for_footprint == rhs.check_for_footprint &&
    lhs.check_number_of_coverages == rhs.check_number_of_coverages;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator1> & lhs, const ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ipa_building_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae6d4c81597e3fc1b51bfbc1504d8ce0";
  }

  static const char* value(const ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae6d4c81597e3fc1ULL;
  static const uint64_t static_value2 = 0xb51bfbc1504d8ce0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ipa_building_msgs/CheckCoverageRequest";
  }

  static const char* value(const ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs/Image input_map				# the action server need a map as a input image to segment it, IMPORTANT: The algorithm needs a black and white 8bit single-channel image, which is 0 (black) for obstacles and 255 (white) for free space\n"
"float32 map_resolution					# resolution of the given map, in [meter/cell]\n"
"geometry_msgs/Pose map_origin			# the origin of the map, in [meter]\n"
"geometry_msgs/Pose2D[] path				# check the coverage along this path of the robot center, in the world frame in [meter]\n"
"geometry_msgs/Point32[] field_of_view	# the points that define the field of view of the robot, relative to the robot center (x-axis points to robot's front side, y-axis points to robot's left side, z-axis upwards), in [meter]\n"
"geometry_msgs/Point32 field_of_view_origin	# the mounting position of the camera spanning the field of view, relative to the robot center (x-axis points to robot's front side, y-axis points to robot's left side, z-axis upwards), in [meter]\n"
"float32 coverage_radius					# radius that is used to plan the coverage planning for the robot and not the field of view, assuming that the part that needs to cover everything (e.g. the cleaning part) can be represented by a fitting circle (e.g. smaller than the actual part to ensure coverage), in [meter]\n"
"bool check_for_footprint				# determine, if the coverage check should be done for the footprint or the field of view\n"
"bool check_number_of_coverages			# if set, the server returns a map that shows how often one pixel has been covered during the path, return format: 32bit single-channel image\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.input_map);
      stream.next(m.map_resolution);
      stream.next(m.map_origin);
      stream.next(m.path);
      stream.next(m.field_of_view);
      stream.next(m.field_of_view_origin);
      stream.next(m.coverage_radius);
      stream.next(m.check_for_footprint);
      stream.next(m.check_number_of_coverages);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckCoverageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ipa_building_msgs::CheckCoverageRequest_<ContainerAllocator>& v)
  {
    s << indent << "input_map: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.input_map);
    s << indent << "map_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.map_resolution);
    s << indent << "map_origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.map_origin);
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "    ", v.path[i]);
    }
    s << indent << "field_of_view[]" << std::endl;
    for (size_t i = 0; i < v.field_of_view.size(); ++i)
    {
      s << indent << "  field_of_view[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.field_of_view[i]);
    }
    s << indent << "field_of_view_origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.field_of_view_origin);
    s << indent << "coverage_radius: ";
    Printer<float>::stream(s, indent + "  ", v.coverage_radius);
    s << indent << "check_for_footprint: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.check_for_footprint);
    s << indent << "check_number_of_coverages: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.check_number_of_coverages);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IPA_BUILDING_MSGS_MESSAGE_CHECKCOVERAGEREQUEST_H
