//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the ipa_room_segmentation package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __ipa_room_segmentation__ROOMSEGMENTATIONCONFIG_H__
#define __ipa_room_segmentation__ROOMSEGMENTATIONCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace ipa_room_segmentation
{
  class RoomSegmentationConfigStatics;

  class RoomSegmentationConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(RoomSegmentationConfig &config, const RoomSegmentationConfig &max, const RoomSegmentationConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const RoomSegmentationConfig &config1, const RoomSegmentationConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, RoomSegmentationConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const RoomSegmentationConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RoomSegmentationConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const RoomSegmentationConfig &config) const = 0;
      virtual void getValue(const RoomSegmentationConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T RoomSegmentationConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T RoomSegmentationConfig::* field;

      virtual void clamp(RoomSegmentationConfig &config, const RoomSegmentationConfig &max, const RoomSegmentationConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const RoomSegmentationConfig &config1, const RoomSegmentationConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, RoomSegmentationConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const RoomSegmentationConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RoomSegmentationConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const RoomSegmentationConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const RoomSegmentationConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, RoomSegmentationConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, RoomSegmentationConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<RoomSegmentationConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(RoomSegmentationConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("room_segmentation_algorithm"==(*_i)->name){room_segmentation_algorithm = boost::any_cast<int>(val);}
        if("display_segmented_map"==(*_i)->name){display_segmented_map = boost::any_cast<bool>(val);}
        if("publish_segmented_map"==(*_i)->name){publish_segmented_map = boost::any_cast<bool>(val);}
        if("room_area_factor_upper_limit_morphological"==(*_i)->name){room_area_factor_upper_limit_morphological = boost::any_cast<double>(val);}
        if("room_area_factor_lower_limit_morphological"==(*_i)->name){room_area_factor_lower_limit_morphological = boost::any_cast<double>(val);}
        if("room_area_factor_upper_limit_distance"==(*_i)->name){room_area_factor_upper_limit_distance = boost::any_cast<double>(val);}
        if("room_area_factor_lower_limit_distance"==(*_i)->name){room_area_factor_lower_limit_distance = boost::any_cast<double>(val);}
        if("room_area_factor_upper_limit_voronoi"==(*_i)->name){room_area_factor_upper_limit_voronoi = boost::any_cast<double>(val);}
        if("room_area_factor_lower_limit_voronoi"==(*_i)->name){room_area_factor_lower_limit_voronoi = boost::any_cast<double>(val);}
        if("room_area_factor_upper_limit_semantic"==(*_i)->name){room_area_factor_upper_limit_semantic = boost::any_cast<double>(val);}
        if("room_area_factor_lower_limit_semantic"==(*_i)->name){room_area_factor_lower_limit_semantic = boost::any_cast<double>(val);}
        if("room_area_upper_limit_voronoi_random"==(*_i)->name){room_area_upper_limit_voronoi_random = boost::any_cast<double>(val);}
        if("room_area_lower_limit_voronoi_random"==(*_i)->name){room_area_lower_limit_voronoi_random = boost::any_cast<double>(val);}
        if("room_area_upper_limit_passthrough"==(*_i)->name){room_area_upper_limit_passthrough = boost::any_cast<double>(val);}
        if("room_area_lower_limit_passthrough"==(*_i)->name){room_area_lower_limit_passthrough = boost::any_cast<double>(val);}
        if("voronoi_neighborhood_index"==(*_i)->name){voronoi_neighborhood_index = boost::any_cast<int>(val);}
        if("max_iterations"==(*_i)->name){max_iterations = boost::any_cast<int>(val);}
        if("min_critical_point_distance_factor"==(*_i)->name){min_critical_point_distance_factor = boost::any_cast<double>(val);}
        if("max_area_for_merging"==(*_i)->name){max_area_for_merging = boost::any_cast<double>(val);}
        if("voronoi_random_field_epsilon_for_neighborhood"==(*_i)->name){voronoi_random_field_epsilon_for_neighborhood = boost::any_cast<int>(val);}
        if("min_neighborhood_size"==(*_i)->name){min_neighborhood_size = boost::any_cast<int>(val);}
        if("min_voronoi_random_field_node_distance"==(*_i)->name){min_voronoi_random_field_node_distance = boost::any_cast<double>(val);}
        if("max_voronoi_random_field_inference_iterations"==(*_i)->name){max_voronoi_random_field_inference_iterations = boost::any_cast<int>(val);}
      }
    }

    int room_segmentation_algorithm;
bool display_segmented_map;
bool publish_segmented_map;
double room_area_factor_upper_limit_morphological;
double room_area_factor_lower_limit_morphological;
double room_area_factor_upper_limit_distance;
double room_area_factor_lower_limit_distance;
double room_area_factor_upper_limit_voronoi;
double room_area_factor_lower_limit_voronoi;
double room_area_factor_upper_limit_semantic;
double room_area_factor_lower_limit_semantic;
double room_area_upper_limit_voronoi_random;
double room_area_lower_limit_voronoi_random;
double room_area_upper_limit_passthrough;
double room_area_lower_limit_passthrough;
int voronoi_neighborhood_index;
int max_iterations;
double min_critical_point_distance_factor;
double max_area_for_merging;
int voronoi_random_field_epsilon_for_neighborhood;
int min_neighborhood_size;
double min_voronoi_random_field_node_distance;
int max_voronoi_random_field_inference_iterations;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int room_segmentation_algorithm;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool display_segmented_map;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool publish_segmented_map;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_factor_upper_limit_morphological;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_factor_lower_limit_morphological;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_factor_upper_limit_distance;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_factor_lower_limit_distance;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_factor_upper_limit_voronoi;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_factor_lower_limit_voronoi;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_factor_upper_limit_semantic;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_factor_lower_limit_semantic;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_upper_limit_voronoi_random;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_lower_limit_voronoi_random;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_upper_limit_passthrough;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double room_area_lower_limit_passthrough;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int voronoi_neighborhood_index;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_iterations;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_critical_point_distance_factor;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_area_for_merging;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int voronoi_random_field_epsilon_for_neighborhood;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int min_neighborhood_size;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_voronoi_random_field_node_distance;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_voronoi_random_field_inference_iterations;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("RoomSegmentationConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const RoomSegmentationConfig &__max__ = __getMax__();
      const RoomSegmentationConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const RoomSegmentationConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const RoomSegmentationConfig &__getDefault__();
    static const RoomSegmentationConfig &__getMax__();
    static const RoomSegmentationConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const RoomSegmentationConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void RoomSegmentationConfig::ParamDescription<std::string>::clamp(RoomSegmentationConfig &config, const RoomSegmentationConfig &max, const RoomSegmentationConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class RoomSegmentationConfigStatics
  {
    friend class RoomSegmentationConfig;

    RoomSegmentationConfigStatics()
    {
RoomSegmentationConfig::GroupDescription<RoomSegmentationConfig::DEFAULT, RoomSegmentationConfig> Default("Default", "", 0, 0, true, &RoomSegmentationConfig::groups);
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_segmentation_algorithm = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_segmentation_algorithm = 99;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_segmentation_algorithm = 3;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("room_segmentation_algorithm", "int", 0, "Segmentation method", "{'enum_description': 'Segmentation algorithm', 'enum': [{'srcline': 8, 'description': 'Use the morphological segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'MorphologicalSegmentation'}, {'srcline': 9, 'description': 'Use the distance segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'DistanceSegmentation'}, {'srcline': 10, 'description': 'Use the Voronoi segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'VoronoiSegmentation'}, {'srcline': 11, 'description': 'Use the semantic/feature-based segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'SemanticSegmentation'}, {'srcline': 12, 'description': 'Use the voronoi-random-field segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'RandomFieldSegmentation'}, {'srcline': 13, 'description': 'Use the pass through segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 99, 'ctype': 'int', 'type': 'int', 'name': 'PassThroughSegmentation'}]}", &RoomSegmentationConfig::room_segmentation_algorithm)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("room_segmentation_algorithm", "int", 0, "Segmentation method", "{'enum_description': 'Segmentation algorithm', 'enum': [{'srcline': 8, 'description': 'Use the morphological segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'MorphologicalSegmentation'}, {'srcline': 9, 'description': 'Use the distance segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'DistanceSegmentation'}, {'srcline': 10, 'description': 'Use the Voronoi segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'VoronoiSegmentation'}, {'srcline': 11, 'description': 'Use the semantic/feature-based segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'SemanticSegmentation'}, {'srcline': 12, 'description': 'Use the voronoi-random-field segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'RandomFieldSegmentation'}, {'srcline': 13, 'description': 'Use the pass through segmentation algorithm.', 'srcfile': '/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg', 'cconsttype': 'const int', 'value': 99, 'ctype': 'int', 'type': 'int', 'name': 'PassThroughSegmentation'}]}", &RoomSegmentationConfig::room_segmentation_algorithm)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.display_segmented_map = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.display_segmented_map = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.display_segmented_map = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<bool>("display_segmented_map", "bool", 0, "Show the resulting segmented map directly", "", &RoomSegmentationConfig::display_segmented_map)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<bool>("display_segmented_map", "bool", 0, "Show the resulting segmented map directly", "", &RoomSegmentationConfig::display_segmented_map)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.publish_segmented_map = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.publish_segmented_map = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.publish_segmented_map = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<bool>("publish_segmented_map", "bool", 0, "Publish the resulting segmented map as grid map", "", &RoomSegmentationConfig::publish_segmented_map)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<bool>("publish_segmented_map", "bool", 0, "Publish the resulting segmented map as grid map", "", &RoomSegmentationConfig::publish_segmented_map)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_factor_upper_limit_morphological = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_factor_upper_limit_morphological = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_factor_upper_limit_morphological = 47.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_upper_limit_morphological", "double", 0, "Upper room limit for morphological segmentation", "", &RoomSegmentationConfig::room_area_factor_upper_limit_morphological)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_upper_limit_morphological", "double", 0, "Upper room limit for morphological segmentation", "", &RoomSegmentationConfig::room_area_factor_upper_limit_morphological)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_factor_lower_limit_morphological = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_factor_lower_limit_morphological = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_factor_lower_limit_morphological = 0.8;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_lower_limit_morphological", "double", 0, "Lower room limit for morphological segmentation", "", &RoomSegmentationConfig::room_area_factor_lower_limit_morphological)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_lower_limit_morphological", "double", 0, "Lower room limit for morphological segmentation", "", &RoomSegmentationConfig::room_area_factor_lower_limit_morphological)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_factor_upper_limit_distance = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_factor_upper_limit_distance = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_factor_upper_limit_distance = 163.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_upper_limit_distance", "double", 0, "Upper room limit for distance segmentation", "", &RoomSegmentationConfig::room_area_factor_upper_limit_distance)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_upper_limit_distance", "double", 0, "Upper room limit for distance segmentation", "", &RoomSegmentationConfig::room_area_factor_upper_limit_distance)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_factor_lower_limit_distance = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_factor_lower_limit_distance = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_factor_lower_limit_distance = 0.35;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_lower_limit_distance", "double", 0, "Lower room limit for distance segmentation", "", &RoomSegmentationConfig::room_area_factor_lower_limit_distance)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_lower_limit_distance", "double", 0, "Lower room limit for distance segmentation", "", &RoomSegmentationConfig::room_area_factor_lower_limit_distance)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_factor_upper_limit_voronoi = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_factor_upper_limit_voronoi = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_factor_upper_limit_voronoi = 1000000.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_upper_limit_voronoi", "double", 0, "Upper room limit for Voronoi segmentation", "", &RoomSegmentationConfig::room_area_factor_upper_limit_voronoi)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_upper_limit_voronoi", "double", 0, "Upper room limit for Voronoi segmentation", "", &RoomSegmentationConfig::room_area_factor_upper_limit_voronoi)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_factor_lower_limit_voronoi = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_factor_lower_limit_voronoi = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_factor_lower_limit_voronoi = 0.1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_lower_limit_voronoi", "double", 0, "Lower room limit for Voronoi segmentation", "", &RoomSegmentationConfig::room_area_factor_lower_limit_voronoi)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_lower_limit_voronoi", "double", 0, "Lower room limit for Voronoi segmentation", "", &RoomSegmentationConfig::room_area_factor_lower_limit_voronoi)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_factor_upper_limit_semantic = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_factor_upper_limit_semantic = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_factor_upper_limit_semantic = 1000000.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_upper_limit_semantic", "double", 0, "Upper room limit for semantic/feature-based segmentation", "", &RoomSegmentationConfig::room_area_factor_upper_limit_semantic)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_upper_limit_semantic", "double", 0, "Upper room limit for semantic/feature-based segmentation", "", &RoomSegmentationConfig::room_area_factor_upper_limit_semantic)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_factor_lower_limit_semantic = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_factor_lower_limit_semantic = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_factor_lower_limit_semantic = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_lower_limit_semantic", "double", 0, "Lower room limit for semantic/feature-based segmentation", "", &RoomSegmentationConfig::room_area_factor_lower_limit_semantic)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_factor_lower_limit_semantic", "double", 0, "Lower room limit for semantic/feature-based segmentation", "", &RoomSegmentationConfig::room_area_factor_lower_limit_semantic)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_upper_limit_voronoi_random = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_upper_limit_voronoi_random = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_upper_limit_voronoi_random = 1000000.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_upper_limit_voronoi_random", "double", 0, "Upper room limit for Voronoi-random-field segmentation", "", &RoomSegmentationConfig::room_area_upper_limit_voronoi_random)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_upper_limit_voronoi_random", "double", 0, "Upper room limit for Voronoi-random-field segmentation", "", &RoomSegmentationConfig::room_area_upper_limit_voronoi_random)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_lower_limit_voronoi_random = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_lower_limit_voronoi_random = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_lower_limit_voronoi_random = 1.53;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_lower_limit_voronoi_random", "double", 0, "Lower room limit for Voronoi-random-field segmentation", "", &RoomSegmentationConfig::room_area_lower_limit_voronoi_random)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_lower_limit_voronoi_random", "double", 0, "Lower room limit for Voronoi-random-field segmentation", "", &RoomSegmentationConfig::room_area_lower_limit_voronoi_random)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_upper_limit_passthrough = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_upper_limit_passthrough = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_upper_limit_passthrough = 1000000.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_upper_limit_passthrough", "double", 0, "Upper room limit for Voronoi-random-field segmentation", "", &RoomSegmentationConfig::room_area_upper_limit_passthrough)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_upper_limit_passthrough", "double", 0, "Upper room limit for Voronoi-random-field segmentation", "", &RoomSegmentationConfig::room_area_upper_limit_passthrough)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_area_lower_limit_passthrough = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_area_lower_limit_passthrough = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_area_lower_limit_passthrough = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_lower_limit_passthrough", "double", 0, "Lower room limit for Voronoi-random-field segmentation", "", &RoomSegmentationConfig::room_area_lower_limit_passthrough)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("room_area_lower_limit_passthrough", "double", 0, "Lower room limit for Voronoi-random-field segmentation", "", &RoomSegmentationConfig::room_area_lower_limit_passthrough)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.voronoi_neighborhood_index = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.voronoi_neighborhood_index = 2147483647;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.voronoi_neighborhood_index = 280;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("voronoi_neighborhood_index", "int", 0, "Size of neighborhood on graph for Voronoi segmentation, larger value sets a larger neighborhood for searching critical points", "", &RoomSegmentationConfig::voronoi_neighborhood_index)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("voronoi_neighborhood_index", "int", 0, "Size of neighborhood on graph for Voronoi segmentation, larger value sets a larger neighborhood for searching critical points", "", &RoomSegmentationConfig::voronoi_neighborhood_index)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_iterations = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_iterations = 2147483647;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_iterations = 150;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("max_iterations", "int", 0, "Max number of Iterations for search of neighbors, also used for the vrf segmentation", "", &RoomSegmentationConfig::max_iterations)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("max_iterations", "int", 0, "Max number of Iterations for search of neighbors, also used for the vrf segmentation", "", &RoomSegmentationConfig::max_iterations)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_critical_point_distance_factor = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_critical_point_distance_factor = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_critical_point_distance_factor = 0.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("min_critical_point_distance_factor", "double", 0, "Minimal distance factor between two critical points before one of it gets eliminated", "", &RoomSegmentationConfig::min_critical_point_distance_factor)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("min_critical_point_distance_factor", "double", 0, "Minimal distance factor between two critical points before one of it gets eliminated", "", &RoomSegmentationConfig::min_critical_point_distance_factor)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_area_for_merging = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_area_for_merging = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_area_for_merging = 12.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("max_area_for_merging", "double", 0, "Maximal area [m^2] of a room that should be merged with its surrounding rooms, also used for the voronoi random field segmentation", "", &RoomSegmentationConfig::max_area_for_merging)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("max_area_for_merging", "double", 0, "Maximal area [m^2] of a room that should be merged with its surrounding rooms, also used for the voronoi random field segmentation", "", &RoomSegmentationConfig::max_area_for_merging)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.voronoi_random_field_epsilon_for_neighborhood = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.voronoi_random_field_epsilon_for_neighborhood = 2147483647;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.voronoi_random_field_epsilon_for_neighborhood = 5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("voronoi_random_field_epsilon_for_neighborhood", "int", 0, "Larger value sets larger neighborhood, concentrated in a node of the conditional random field", "", &RoomSegmentationConfig::voronoi_random_field_epsilon_for_neighborhood)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("voronoi_random_field_epsilon_for_neighborhood", "int", 0, "Larger value sets larger neighborhood, concentrated in a node of the conditional random field", "", &RoomSegmentationConfig::voronoi_random_field_epsilon_for_neighborhood)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_neighborhood_size = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_neighborhood_size = 2147483647;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_neighborhood_size = 4;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("min_neighborhood_size", "int", 0, "Min. size of the above mentioned neighborhood", "", &RoomSegmentationConfig::min_neighborhood_size)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("min_neighborhood_size", "int", 0, "Min. size of the above mentioned neighborhood", "", &RoomSegmentationConfig::min_neighborhood_size)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_voronoi_random_field_node_distance = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_voronoi_random_field_node_distance = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_voronoi_random_field_node_distance = 7.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("min_voronoi_random_field_node_distance", "double", 0, "Min distance the base nodes for each crf node need to be apart", "", &RoomSegmentationConfig::min_voronoi_random_field_node_distance)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<double>("min_voronoi_random_field_node_distance", "double", 0, "Min distance the base nodes for each crf node need to be apart", "", &RoomSegmentationConfig::min_voronoi_random_field_node_distance)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_voronoi_random_field_inference_iterations = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_voronoi_random_field_inference_iterations = 2147483647;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_voronoi_random_field_inference_iterations = 9000;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("max_voronoi_random_field_inference_iterations", "int", 0, "Max number of iterations the inference algorithm should do", "", &RoomSegmentationConfig::max_voronoi_random_field_inference_iterations)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomSegmentationConfig::AbstractParamDescriptionConstPtr(new RoomSegmentationConfig::ParamDescription<int>("max_voronoi_random_field_inference_iterations", "int", 0, "Max number of iterations the inference algorithm should do", "", &RoomSegmentationConfig::max_voronoi_random_field_inference_iterations)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(RoomSegmentationConfig::AbstractGroupDescriptionConstPtr(new RoomSegmentationConfig::GroupDescription<RoomSegmentationConfig::DEFAULT, RoomSegmentationConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<RoomSegmentationConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<RoomSegmentationConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<RoomSegmentationConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    RoomSegmentationConfig __max__;
    RoomSegmentationConfig __min__;
    RoomSegmentationConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const RoomSegmentationConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static RoomSegmentationConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &RoomSegmentationConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const RoomSegmentationConfig &RoomSegmentationConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const RoomSegmentationConfig &RoomSegmentationConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const RoomSegmentationConfig &RoomSegmentationConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<RoomSegmentationConfig::AbstractParamDescriptionConstPtr> &RoomSegmentationConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<RoomSegmentationConfig::AbstractGroupDescriptionConstPtr> &RoomSegmentationConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const RoomSegmentationConfigStatics *RoomSegmentationConfig::__get_statics__()
  {
    const static RoomSegmentationConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = RoomSegmentationConfigStatics::get_instance();

    return statics;
  }

//#line 8 "/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg"
      const int RoomSegmentation_MorphologicalSegmentation = 1;
//#line 9 "/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg"
      const int RoomSegmentation_DistanceSegmentation = 2;
//#line 10 "/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg"
      const int RoomSegmentation_VoronoiSegmentation = 3;
//#line 11 "/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg"
      const int RoomSegmentation_SemanticSegmentation = 4;
//#line 12 "/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg"
      const int RoomSegmentation_RandomFieldSegmentation = 5;
//#line 13 "/home/liun/catkin_ws_10_23/src/ipa_coverage_planning/ipa_room_segmentation/cfg/RoomSegmentation.cfg"
      const int RoomSegmentation_PassThroughSegmentation = 99;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __ROOMSEGMENTATIONRECONFIGURATOR_H__
