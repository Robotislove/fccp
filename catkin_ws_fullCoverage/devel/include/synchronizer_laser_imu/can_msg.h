// Generated by gencpp from file synchronizer_laser_imu/can_msg.msg
// DO NOT EDIT!


#ifndef SYNCHRONIZER_LASER_IMU_MESSAGE_CAN_MSG_H
#define SYNCHRONIZER_LASER_IMU_MESSAGE_CAN_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace synchronizer_laser_imu
{
template <class ContainerAllocator>
struct can_msg_
{
  typedef can_msg_<ContainerAllocator> Type;

  can_msg_()
    : clean(0)
    , pump(0)
    , left(0)
    , right(0)
    , mop(0)
    , park(0)
    , forward(0)
    , backward(0)
    , wash(0)
    , speed_enable(0)
    , driverless(0)
    , driverless_enabled(0)
    , velocity(0.0)
    , angle(0.0)
    , angle_velocity(0.0)
    , charge(0.0)  {
    }
  can_msg_(const ContainerAllocator& _alloc)
    : clean(0)
    , pump(0)
    , left(0)
    , right(0)
    , mop(0)
    , park(0)
    , forward(0)
    , backward(0)
    , wash(0)
    , speed_enable(0)
    , driverless(0)
    , driverless_enabled(0)
    , velocity(0.0)
    , angle(0.0)
    , angle_velocity(0.0)
    , charge(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _clean_type;
  _clean_type clean;

   typedef int8_t _pump_type;
  _pump_type pump;

   typedef int8_t _left_type;
  _left_type left;

   typedef int8_t _right_type;
  _right_type right;

   typedef int8_t _mop_type;
  _mop_type mop;

   typedef int8_t _park_type;
  _park_type park;

   typedef int8_t _forward_type;
  _forward_type forward;

   typedef int8_t _backward_type;
  _backward_type backward;

   typedef int8_t _wash_type;
  _wash_type wash;

   typedef int8_t _speed_enable_type;
  _speed_enable_type speed_enable;

   typedef int8_t _driverless_type;
  _driverless_type driverless;

   typedef int8_t _driverless_enabled_type;
  _driverless_enabled_type driverless_enabled;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _angle_velocity_type;
  _angle_velocity_type angle_velocity;

   typedef float _charge_type;
  _charge_type charge;





  typedef boost::shared_ptr< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> const> ConstPtr;

}; // struct can_msg_

typedef ::synchronizer_laser_imu::can_msg_<std::allocator<void> > can_msg;

typedef boost::shared_ptr< ::synchronizer_laser_imu::can_msg > can_msgPtr;
typedef boost::shared_ptr< ::synchronizer_laser_imu::can_msg const> can_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::synchronizer_laser_imu::can_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::synchronizer_laser_imu::can_msg_<ContainerAllocator1> & lhs, const ::synchronizer_laser_imu::can_msg_<ContainerAllocator2> & rhs)
{
  return lhs.clean == rhs.clean &&
    lhs.pump == rhs.pump &&
    lhs.left == rhs.left &&
    lhs.right == rhs.right &&
    lhs.mop == rhs.mop &&
    lhs.park == rhs.park &&
    lhs.forward == rhs.forward &&
    lhs.backward == rhs.backward &&
    lhs.wash == rhs.wash &&
    lhs.speed_enable == rhs.speed_enable &&
    lhs.driverless == rhs.driverless &&
    lhs.driverless_enabled == rhs.driverless_enabled &&
    lhs.velocity == rhs.velocity &&
    lhs.angle == rhs.angle &&
    lhs.angle_velocity == rhs.angle_velocity &&
    lhs.charge == rhs.charge;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::synchronizer_laser_imu::can_msg_<ContainerAllocator1> & lhs, const ::synchronizer_laser_imu::can_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace synchronizer_laser_imu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b1c16ed3a8d75fe0e1a70a3ea15cf05";
  }

  static const char* value(const ::synchronizer_laser_imu::can_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b1c16ed3a8d75feULL;
  static const uint64_t static_value2 = 0x0e1a70a3ea15cf05ULL;
};

template<class ContainerAllocator>
struct DataType< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "synchronizer_laser_imu/can_msg";
  }

  static const char* value(const ::synchronizer_laser_imu::can_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 clean\n"
"int8 pump\n"
"int8 left\n"
"int8 right\n"
"int8 mop\n"
"int8 park\n"
"int8 forward\n"
"int8 backward\n"
"int8 wash\n"
"int8 speed_enable\n"
"int8 driverless\n"
"int8 driverless_enabled\n"
"float32 velocity\n"
"float32 angle\n"
"float32 angle_velocity\n"
"float32 charge\n"
"\n"
" \n"
;
  }

  static const char* value(const ::synchronizer_laser_imu::can_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.clean);
      stream.next(m.pump);
      stream.next(m.left);
      stream.next(m.right);
      stream.next(m.mop);
      stream.next(m.park);
      stream.next(m.forward);
      stream.next(m.backward);
      stream.next(m.wash);
      stream.next(m.speed_enable);
      stream.next(m.driverless);
      stream.next(m.driverless_enabled);
      stream.next(m.velocity);
      stream.next(m.angle);
      stream.next(m.angle_velocity);
      stream.next(m.charge);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct can_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::synchronizer_laser_imu::can_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::synchronizer_laser_imu::can_msg_<ContainerAllocator>& v)
  {
    s << indent << "clean: ";
    Printer<int8_t>::stream(s, indent + "  ", v.clean);
    s << indent << "pump: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pump);
    s << indent << "left: ";
    Printer<int8_t>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<int8_t>::stream(s, indent + "  ", v.right);
    s << indent << "mop: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mop);
    s << indent << "park: ";
    Printer<int8_t>::stream(s, indent + "  ", v.park);
    s << indent << "forward: ";
    Printer<int8_t>::stream(s, indent + "  ", v.forward);
    s << indent << "backward: ";
    Printer<int8_t>::stream(s, indent + "  ", v.backward);
    s << indent << "wash: ";
    Printer<int8_t>::stream(s, indent + "  ", v.wash);
    s << indent << "speed_enable: ";
    Printer<int8_t>::stream(s, indent + "  ", v.speed_enable);
    s << indent << "driverless: ";
    Printer<int8_t>::stream(s, indent + "  ", v.driverless);
    s << indent << "driverless_enabled: ";
    Printer<int8_t>::stream(s, indent + "  ", v.driverless_enabled);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "angle_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.angle_velocity);
    s << indent << "charge: ";
    Printer<float>::stream(s, indent + "  ", v.charge);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYNCHRONIZER_LASER_IMU_MESSAGE_CAN_MSG_H
