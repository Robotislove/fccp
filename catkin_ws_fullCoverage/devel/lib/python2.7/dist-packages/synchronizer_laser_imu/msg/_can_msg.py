# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from synchronizer_laser_imu/can_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class can_msg(genpy.Message):
  _md5sum = "5b1c16ed3a8d75fe0e1a70a3ea15cf05"
  _type = "synchronizer_laser_imu/can_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 clean
int8 pump
int8 left
int8 right
int8 mop
int8 park
int8 forward
int8 backward
int8 wash
int8 speed_enable
int8 driverless
int8 driverless_enabled
float32 velocity
float32 angle
float32 angle_velocity
float32 charge

 
"""
  __slots__ = ['clean','pump','left','right','mop','park','forward','backward','wash','speed_enable','driverless','driverless_enabled','velocity','angle','angle_velocity','charge']
  _slot_types = ['int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       clean,pump,left,right,mop,park,forward,backward,wash,speed_enable,driverless,driverless_enabled,velocity,angle,angle_velocity,charge

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(can_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.clean is None:
        self.clean = 0
      if self.pump is None:
        self.pump = 0
      if self.left is None:
        self.left = 0
      if self.right is None:
        self.right = 0
      if self.mop is None:
        self.mop = 0
      if self.park is None:
        self.park = 0
      if self.forward is None:
        self.forward = 0
      if self.backward is None:
        self.backward = 0
      if self.wash is None:
        self.wash = 0
      if self.speed_enable is None:
        self.speed_enable = 0
      if self.driverless is None:
        self.driverless = 0
      if self.driverless_enabled is None:
        self.driverless_enabled = 0
      if self.velocity is None:
        self.velocity = 0.
      if self.angle is None:
        self.angle = 0.
      if self.angle_velocity is None:
        self.angle_velocity = 0.
      if self.charge is None:
        self.charge = 0.
    else:
      self.clean = 0
      self.pump = 0
      self.left = 0
      self.right = 0
      self.mop = 0
      self.park = 0
      self.forward = 0
      self.backward = 0
      self.wash = 0
      self.speed_enable = 0
      self.driverless = 0
      self.driverless_enabled = 0
      self.velocity = 0.
      self.angle = 0.
      self.angle_velocity = 0.
      self.charge = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12b4f().pack(_x.clean, _x.pump, _x.left, _x.right, _x.mop, _x.park, _x.forward, _x.backward, _x.wash, _x.speed_enable, _x.driverless, _x.driverless_enabled, _x.velocity, _x.angle, _x.angle_velocity, _x.charge))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.clean, _x.pump, _x.left, _x.right, _x.mop, _x.park, _x.forward, _x.backward, _x.wash, _x.speed_enable, _x.driverless, _x.driverless_enabled, _x.velocity, _x.angle, _x.angle_velocity, _x.charge,) = _get_struct_12b4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12b4f().pack(_x.clean, _x.pump, _x.left, _x.right, _x.mop, _x.park, _x.forward, _x.backward, _x.wash, _x.speed_enable, _x.driverless, _x.driverless_enabled, _x.velocity, _x.angle, _x.angle_velocity, _x.charge))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.clean, _x.pump, _x.left, _x.right, _x.mop, _x.park, _x.forward, _x.backward, _x.wash, _x.speed_enable, _x.driverless, _x.driverless_enabled, _x.velocity, _x.angle, _x.angle_velocity, _x.charge,) = _get_struct_12b4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12b4f = None
def _get_struct_12b4f():
    global _struct_12b4f
    if _struct_12b4f is None:
        _struct_12b4f = struct.Struct("<12b4f")
    return _struct_12b4f
