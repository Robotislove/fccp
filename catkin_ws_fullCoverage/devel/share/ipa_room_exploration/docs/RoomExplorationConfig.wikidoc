# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~room_exploration_algorithm
0.default= 2
0.type= int
0.desc=Exploration method Possible values are: GridPointExplorator (1): Use the grid point exploration algorithm., BoustrophedonExplorator (2): Use the boustrophedon exploration algorithm., NeuralNetworkExplorator (3): Use the neural network exploration algorithm., ConvexSPPExplorator (4): Use the convexSPP exploration algorithm., FlowNetworkExplorator (5): Use the flowNetwork exploration algorithm., EnergyFunctionalExplorator (6): Use the energyFunctional exploration algorithm., VoronoiExplorator (7): Use the voronoi exploration algorithm., BoustrophedonVariantExplorator (8): Use a variant of the boustrophedon exploration algorithm.
1.name= ~map_correction_closing_neighborhood_size
1.default= 2
1.type= int
1.desc=Applies a closing operation to neglect inaccessible areas and map errors/artifacts if the map_correction_closing_neighborhood_size parameter is larger than 0. The parameter then specifies the iterations (or neighborhood size) of that closing operation.. Range: -1 to 100
2.name= ~return_path
2.default= True
2.type= bool
2.desc=Boolean used to determine whether the server should return the computed coverage path in the response message. 
3.name= ~execute_path
3.default= False
3.type= bool
3.desc=Boolean used to determine whether the server should navigate the robot along the computed coverage path. 
4.name= ~goal_eps
4.default= 2.0
4.type= double
4.desc=Distance from robot to published goal to publish the next goal in the path. Range: 1.0 to std::numeric_limits<double>::infinity()
5.name= ~use_dyn_goal_eps
5.default= False
5.type= bool
5.desc=Use a dynamic goal distance criterion: the larger the path's curvature, the more accurate the navigation. 
6.name= ~interrupt_navigation_publishing
6.default= False
6.type= bool
6.desc=Interrupt the publishing of navigation goals as long as needed. 
7.name= ~revisit_areas
7.default= True
7.type= bool
7.desc=Revisiting not seen areas due to dynamic obstacles on/off. 
8.name= ~left_sections_min_area
8.default= 0.01
8.type= double
8.desc=Minimal size of left sections to revisit them after one go [m^2]. Range: 1e-07 to std::numeric_limits<double>::infinity()
9.name= ~global_costmap_topic
9.default= /move_base/global_costmap/costmap
9.type= str
9.desc=The name of the global costmap topic. 
10.name= ~coverage_check_service_name
10.default= /room_exploration/coverage_check_server/coverage_check
10.type= str
10.desc=The name of the service to call for a coverage check of the driven trajectory. 
11.name= ~map_frame
11.default= map
11.type= str
11.desc=The name of the map frame, used for tracking of the robot. 
12.name= ~camera_frame
12.default= base_link
12.type= str
12.desc=The name of the camera frame, that is in the same kinematic chain as the map_frame and shows the camera pose. 
13.name= ~tsp_solver
13.default= 3
13.type= int
13.desc=Exploration method Possible values are: NearestNeighborTSP (1): Use the Nearest Neighbor TSP algorithm., GeneticTSP (2): Use the Genetic TSP solver., ConcordeTSP (3): Use the Concorde TSP solver.
14.name= ~tsp_solver_timeout
14.default= 600
14.type= int
14.desc=A sophisticated solver like Concorde or Genetic can be interrupted if it does not find a solution within this time (in [s]), and then falls back to the nearest neighbor solver. Range: 1 to 2147483647
15.name= ~min_cell_area
15.default= 10.0
15.type= double
15.desc=Minimum area of one cell for the boustrophedon explorator. Range: 1e-07 to std::numeric_limits<double>::infinity()
16.name= ~path_eps
16.default= 2.0
16.type= double
16.desc=Minimal distance between two points on the generated path [pixel]. Range: 0.0 to std::numeric_limits<double>::infinity()
17.name= ~grid_obstacle_offset
17.default= 0.0
17.type= double
17.desc=Allows to displace the grid by more than the standard half_grid_size from obstacles [m]. Range: 0.0 to std::numeric_limits<double>::infinity()
18.name= ~max_deviation_from_track
18.default= -1
18.type= int
18.desc=Maximal allowed shift off the ideal boustrophedon track for avoiding obstacles on track, in [pixel]. For negative values max_deviation_from_track is automatically set to grid_spacing. Range: -1 to 2147483647
19.name= ~cell_visiting_order
19.default= 1
19.type= int
19.desc=Cell visiting order method Possible values are: OptimalTSP (1): The optimal visiting order of the cells is determined as TSP problem., LeftToRight (2): Alternative ordering from left to right (measured on y-coordinates of the cells), visits the cells in a more obvious fashion to the human observer (though it is not optimal).
20.name= ~step_size
20.default= 0.008
20.type= double
20.desc=Step size for integrating the state dynamics of the neural network. Range: 0.0001 to 1.0
21.name= ~A
21.default= 17
21.type= int
21.desc=Decaying parameter that pulls the activity of a neuron closer to zero, larger value means faster decreasing. Range: 1 to 2147483647
22.name= ~B
22.default= 5
22.type= int
22.desc=Increasing parameter that tries to increase the activity of a neuron, higher value means a higher desired value and a faster increasing at the beginning. Range: 1 to 2147483647
23.name= ~D
23.default= 7
23.type= int
23.desc=Decreasing parameter when the neuron is labeled as obstacle, higher value means faster decreasing. Range: 1 to 2147483647
24.name= ~E
24.default= 80
24.type= int
24.desc=External input parameter of one neuron that is used in the dynamics corresponding to if it is an obstacle or uncleaned/cleaned, E>>B. Range: 1 to 2147483647
25.name= ~mu
25.default= 1.03
25.type= double
25.desc=Parameter to set the importance of the states of neighboring neurons to the dynamics, higher value means higher influence. Range: 0.001 to std::numeric_limits<double>::infinity()
26.name= ~delta_theta_weight
26.default= 0.15
26.type= double
26.desc=Parameter to set the importance of the traveleing direction from the previous step and the next step, a higher value means that the robot should turn less. Range: 0.0 to std::numeric_limits<double>::infinity()
27.name= ~cell_size
27.default= 0
27.type= int
27.desc=Side length of one grid cell, when discretizing the free space. Range: -1 to 2147483647
28.name= ~delta_theta
28.default= 1.570796
28.type= double
28.desc=Sampling angle when creating possible sensing poses. Range: 0.0001 to std::numeric_limits<double>::infinity()
29.name= ~curvature_factor
29.default= 1.1
29.type= double
29.desc=Factor an arc can be longer than a straight arc. Range: 1.0 to std::numeric_limits<double>::infinity()
30.name= ~max_distance_factor
30.default= 1.0
30.type= double
30.desc=#Factor, an arc can be longer than the maximal distance of the room. Range: 1.0 to std::numeric_limits<double>::infinity()
}
}
# End of autogenerated section. You may edit below.
