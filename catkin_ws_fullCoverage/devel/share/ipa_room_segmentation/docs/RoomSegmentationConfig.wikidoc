# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~room_segmentation_algorithm
0.default= 3
0.type= int
0.desc=Segmentation method Possible values are: MorphologicalSegmentation (1): Use the morphological segmentation algorithm., DistanceSegmentation (2): Use the distance segmentation algorithm., VoronoiSegmentation (3): Use the Voronoi segmentation algorithm., SemanticSegmentation (4): Use the semantic/feature-based segmentation algorithm., RandomFieldSegmentation (5): Use the voronoi-random-field segmentation algorithm., PassThroughSegmentation (99): Use the pass through segmentation algorithm.
1.name= ~display_segmented_map
1.default= False
1.type= bool
1.desc=Show the resulting segmented map directly 
2.name= ~publish_segmented_map
2.default= False
2.type= bool
2.desc=Publish the resulting segmented map as grid map 
3.name= ~room_area_factor_upper_limit_morphological
3.default= 47.0
3.type= double
3.desc=Upper room limit for morphological segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
4.name= ~room_area_factor_lower_limit_morphological
4.default= 0.8
4.type= double
4.desc=Lower room limit for morphological segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
5.name= ~room_area_factor_upper_limit_distance
5.default= 163.0
5.type= double
5.desc=Upper room limit for distance segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
6.name= ~room_area_factor_lower_limit_distance
6.default= 0.35
6.type= double
6.desc=Lower room limit for distance segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
7.name= ~room_area_factor_upper_limit_voronoi
7.default= 1000000.0
7.type= double
7.desc=Upper room limit for Voronoi segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
8.name= ~room_area_factor_lower_limit_voronoi
8.default= 0.1
8.type= double
8.desc=Lower room limit for Voronoi segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
9.name= ~room_area_factor_upper_limit_semantic
9.default= 1000000.0
9.type= double
9.desc=Upper room limit for semantic/feature-based segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
10.name= ~room_area_factor_lower_limit_semantic
10.default= 1.0
10.type= double
10.desc=Lower room limit for semantic/feature-based segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
11.name= ~room_area_upper_limit_voronoi_random
11.default= 1000000.0
11.type= double
11.desc=Upper room limit for Voronoi-random-field segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
12.name= ~room_area_lower_limit_voronoi_random
12.default= 1.53
12.type= double
12.desc=Lower room limit for Voronoi-random-field segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
13.name= ~room_area_upper_limit_passthrough
13.default= 1000000.0
13.type= double
13.desc=Upper room limit for Voronoi-random-field segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
14.name= ~room_area_lower_limit_passthrough
14.default= 1.0
14.type= double
14.desc=Lower room limit for Voronoi-random-field segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
15.name= ~voronoi_neighborhood_index
15.default= 280
15.type= int
15.desc=Size of neighborhood on graph for Voronoi segmentation, larger value sets a larger neighborhood for searching critical points Range: 0 to 2147483647
16.name= ~max_iterations
16.default= 150
16.type= int
16.desc=Max number of Iterations for search of neighbors, also used for the vrf segmentation Range: 0 to 2147483647
17.name= ~min_critical_point_distance_factor
17.default= 0.5
17.type= double
17.desc=Minimal distance factor between two critical points before one of it gets eliminated Range: 0.0 to std::numeric_limits<double>::infinity()
18.name= ~max_area_for_merging
18.default= 12.5
18.type= double
18.desc=Maximal area [m^2] of a room that should be merged with its surrounding rooms, also used for the voronoi random field segmentation Range: 0.0 to std::numeric_limits<double>::infinity()
19.name= ~voronoi_random_field_epsilon_for_neighborhood
19.default= 5
19.type= int
19.desc=Larger value sets larger neighborhood, concentrated in a node of the conditional random field Range: 0 to 2147483647
20.name= ~min_neighborhood_size
20.default= 4
20.type= int
20.desc=Min. size of the above mentioned neighborhood Range: 0 to 2147483647
21.name= ~min_voronoi_random_field_node_distance
21.default= 7.0
21.type= double
21.desc=Min distance the base nodes for each crf node need to be apart Range: 0.0 to std::numeric_limits<double>::infinity()
22.name= ~max_voronoi_random_field_inference_iterations
22.default= 9000
22.type= int
22.desc=Max number of iterations the inference algorithm should do Range: 0 to 2147483647
}
}
# End of autogenerated section. You may edit below.
